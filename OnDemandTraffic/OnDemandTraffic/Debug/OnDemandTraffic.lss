
OnDemandTraffic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004da  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000054e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000054e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000054e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000580  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001068  00000000  00000000  00000724  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e4  00000000  00000000  0000178c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000992  00000000  00000000  00002070  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000028c  00000000  00000000  00002a04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000052c  00000000  00000000  00002c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000076d  00000000  00000000  000031bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00003929  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <main>
  74:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <app_init>:
 */ 
#include "app.h"

void app_init()
{
	led_init(PORT_A, GREEN);
  7c:	60 e0       	ldi	r22, 0x00	; 0
  7e:	81 e4       	ldi	r24, 0x41	; 65
  80:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <led_init>
	led_init(PORT_A, YELLOW);
  84:	61 e0       	ldi	r22, 0x01	; 1
  86:	81 e4       	ldi	r24, 0x41	; 65
  88:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <led_init>
	led_init(PORT_A, RED);
  8c:	62 e0       	ldi	r22, 0x02	; 2
  8e:	81 e4       	ldi	r24, 0x41	; 65
  90:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <led_init>
		
	led_init(PORT_B, GREEN);
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	82 e4       	ldi	r24, 0x42	; 66
  98:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <led_init>
	led_init(PORT_B, YELLOW);
  9c:	61 e0       	ldi	r22, 0x01	; 1
  9e:	82 e4       	ldi	r24, 0x42	; 66
  a0:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <led_init>
	led_init(PORT_B, RED);
  a4:	62 e0       	ldi	r22, 0x02	; 2
  a6:	82 e4       	ldi	r24, 0x42	; 66
  a8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <led_init>
	
	button_init(PORT_D, 2);
  ac:	62 e0       	ldi	r22, 0x02	; 2
  ae:	84 e4       	ldi	r24, 0x44	; 68
  b0:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <button_init>
	
	global_interrupt_enable();
  b4:	0e 94 08 02 	call	0x410	; 0x410 <global_interrupt_enable>
	interrupt_init();
  b8:	0e 94 0c 02 	call	0x418	; 0x418 <interrupt_init>
  bc:	08 95       	ret

000000be <pedestrian_unallowed>:
	
}

void pedestrian_unallowed(uint8 *BREAKER)
{
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	ec 01       	movw	r28, r24
	led_on(PORT_A, GREEN);
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	81 e4       	ldi	r24, 0x41	; 65
  c8:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <led_on>
	led_on(PORT_B, RED);
  cc:	62 e0       	ldi	r22, 0x02	; 2
  ce:	82 e4       	ldi	r24, 0x42	; 66
  d0:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <led_on>
	my_delay_ms(5000, BREAKER);
  d4:	be 01       	movw	r22, r28
  d6:	88 e8       	ldi	r24, 0x88	; 136
  d8:	93 e1       	ldi	r25, 0x13	; 19
  da:	0e 94 4f 02 	call	0x49e	; 0x49e <my_delay_ms>
	led_off(PORT_A, GREEN);
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	81 e4       	ldi	r24, 0x41	; 65
  e2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <led_off>
	led_off(PORT_B, RED);
  e6:	62 e0       	ldi	r22, 0x02	; 2
  e8:	82 e4       	ldi	r24, 0x42	; 66
  ea:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <led_off>
}
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	08 95       	ret

000000f4 <pedestrian_allowed>:
void pedestrian_allowed()
{
	led_on(PORT_B, GREEN);
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	82 e4       	ldi	r24, 0x42	; 66
  f8:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <led_on>
	led_on(PORT_A, RED);
  fc:	62 e0       	ldi	r22, 0x02	; 2
  fe:	81 e4       	ldi	r24, 0x41	; 65
 100:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <led_on>
	my_delay_ms(5000, 0);
 104:	60 e0       	ldi	r22, 0x00	; 0
 106:	70 e0       	ldi	r23, 0x00	; 0
 108:	88 e8       	ldi	r24, 0x88	; 136
 10a:	93 e1       	ldi	r25, 0x13	; 19
 10c:	0e 94 4f 02 	call	0x49e	; 0x49e <my_delay_ms>
	led_off(PORT_B, GREEN);
 110:	60 e0       	ldi	r22, 0x00	; 0
 112:	82 e4       	ldi	r24, 0x42	; 66
 114:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <led_off>
	led_off(PORT_A, RED);
 118:	62 e0       	ldi	r22, 0x02	; 2
 11a:	81 e4       	ldi	r24, 0x41	; 65
 11c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <led_off>
 120:	08 95       	ret

00000122 <blink_yellow>:
}

void blink_yellow(uint32 timeinsec)
{
 122:	0f 93       	push	r16
 124:	1f 93       	push	r17
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	8c 01       	movw	r16, r24
	int i=0;
 12c:	c0 e0       	ldi	r28, 0x00	; 0
 12e:	d0 e0       	ldi	r29, 0x00	; 0
	for(; i<timeinsec; i++)
 130:	1d c0       	rjmp	.+58     	; 0x16c <blink_yellow+0x4a>
	{
		led_on(PORT_A, YELLOW);
 132:	61 e0       	ldi	r22, 0x01	; 1
 134:	81 e4       	ldi	r24, 0x41	; 65
 136:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <led_on>
		led_on(PORT_B, YELLOW);
 13a:	61 e0       	ldi	r22, 0x01	; 1
 13c:	82 e4       	ldi	r24, 0x42	; 66
 13e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <led_on>
		my_delay_ms(500, 0);
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	70 e0       	ldi	r23, 0x00	; 0
 146:	84 ef       	ldi	r24, 0xF4	; 244
 148:	91 e0       	ldi	r25, 0x01	; 1
 14a:	0e 94 4f 02 	call	0x49e	; 0x49e <my_delay_ms>
		led_off(PORT_A, YELLOW);
 14e:	61 e0       	ldi	r22, 0x01	; 1
 150:	81 e4       	ldi	r24, 0x41	; 65
 152:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <led_off>
		led_off(PORT_B, YELLOW);
 156:	61 e0       	ldi	r22, 0x01	; 1
 158:	82 e4       	ldi	r24, 0x42	; 66
 15a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <led_off>
		my_delay_ms(500, 0);
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	70 e0       	ldi	r23, 0x00	; 0
 162:	84 ef       	ldi	r24, 0xF4	; 244
 164:	91 e0       	ldi	r25, 0x01	; 1
 166:	0e 94 4f 02 	call	0x49e	; 0x49e <my_delay_ms>
}

void blink_yellow(uint32 timeinsec)
{
	int i=0;
	for(; i<timeinsec; i++)
 16a:	21 96       	adiw	r28, 0x01	; 1
 16c:	c0 17       	cp	r28, r16
 16e:	d1 07       	cpc	r29, r17
 170:	00 f3       	brcs	.-64     	; 0x132 <blink_yellow+0x10>
		my_delay_ms(500, 0);
		led_off(PORT_A, YELLOW);
		led_off(PORT_B, YELLOW);
		my_delay_ms(500, 0);
	}
}
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	1f 91       	pop	r17
 178:	0f 91       	pop	r16
 17a:	08 95       	ret

0000017c <app_start>:

void app_start(uint8* BREAKER)
{
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	ec 01       	movw	r28, r24
	// PEDESTRIAN RED , CARS GREEN
	*BREAKER = 0;
 182:	18 82       	st	Y, r1
	pedestrian_unallowed(BREAKER);
 184:	0e 94 5f 00 	call	0xbe	; 0xbe <pedestrian_unallowed>
	
	
	*BREAKER = 0;
 188:	18 82       	st	Y, r1
	// blink yellow lights FOR PEDESTRIANS AND VEHICLES
	blink_yellow(5);
 18a:	85 e0       	ldi	r24, 0x05	; 5
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 91 00 	call	0x122	; 0x122 <blink_yellow>
	
	// PEDESTRIAN GREEN, CARS RED
	*BREAKER = 0;
 192:	18 82       	st	Y, r1
	pedestrian_allowed();
 194:	0e 94 7a 00 	call	0xf4	; 0xf4 <pedestrian_allowed>
	
	*BREAKER = 0;
 198:	18 82       	st	Y, r1
	// blink yellow lights FOR PEDESTRIANS AND VEHICLES
	blink_yellow(5);
 19a:	85 e0       	ldi	r24, 0x05	; 5
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 91 00 	call	0x122	; 0x122 <blink_yellow>
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <button_init>:
 */ 

#include "button.h"
void button_init(uint8 buttonport, uint8 buttonpin)
{
	DIO_init(buttonport, buttonpin, IN);
 1a8:	40 e0       	ldi	r20, 0x00	; 0
 1aa:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_init>
 1ae:	08 95       	ret

000001b0 <led_init>:
 */ 
#include "LED.h"

void led_init(uint8 ledport, uint8 ledpin)
{
	DIO_init(ledport, ledpin, OUT);
 1b0:	41 e0       	ldi	r20, 0x01	; 1
 1b2:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_init>
 1b6:	08 95       	ret

000001b8 <led_on>:
}

void led_on(uint8 ledport, uint8 ledpin)
{
	DIO_write(ledport, ledpin, HIGH);
 1b8:	41 e0       	ldi	r20, 0x01	; 1
 1ba:	0e 94 81 01 	call	0x302	; 0x302 <DIO_write>
 1be:	08 95       	ret

000001c0 <led_off>:
}


void led_off(uint8 ledport, uint8 ledpin)
{
	DIO_write(ledport, ledpin, LOW);
 1c0:	40 e0       	ldi	r20, 0x00	; 0
 1c2:	0e 94 81 01 	call	0x302	; 0x302 <DIO_write>
 1c6:	08 95       	ret

000001c8 <main>:
uint8 LOOP_BREAKER = 0;
uint8 RED_STATE = 0;

int main(void)
{	
	app_init();
 1c8:	0e 94 3e 00 	call	0x7c	; 0x7c <app_init>
    while (1) 
    {
		app_start(&LOOP_BREAKER);
 1cc:	80 e6       	ldi	r24, 0x60	; 96
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 be 00 	call	0x17c	; 0x17c <app_start>
 1d4:	fb cf       	rjmp	.-10     	; 0x1cc <main+0x4>

000001d6 <__vector_1>:
    }
}

ISR(EXT_INT_0)
{
 1d6:	1f 92       	push	r1
 1d8:	0f 92       	push	r0
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	0f 92       	push	r0
 1de:	11 24       	eor	r1, r1
 1e0:	8f 93       	push	r24
	LOOP_BREAKER = 1;
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
}
 1e8:	8f 91       	pop	r24
 1ea:	0f 90       	pop	r0
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	0f 90       	pop	r0
 1f0:	1f 90       	pop	r1
 1f2:	18 95       	reti

000001f4 <DIO_init>:
//Function definitions
#include "dio.h"

void DIO_init(uint8 portnumber, uint8 pinnumber, uint8 direction)
{
	switch(portnumber)
 1f4:	82 34       	cpi	r24, 0x42	; 66
 1f6:	51 f1       	breq	.+84     	; 0x24c <DIO_init+0x58>
 1f8:	18 f4       	brcc	.+6      	; 0x200 <DIO_init+0xc>
 1fa:	81 34       	cpi	r24, 0x41	; 65
 1fc:	41 f0       	breq	.+16     	; 0x20e <DIO_init+0x1a>
 1fe:	08 95       	ret
 200:	83 34       	cpi	r24, 0x43	; 67
 202:	09 f4       	brne	.+2      	; 0x206 <DIO_init+0x12>
 204:	42 c0       	rjmp	.+132    	; 0x28a <DIO_init+0x96>
 206:	84 34       	cpi	r24, 0x44	; 68
 208:	09 f4       	brne	.+2      	; 0x20c <DIO_init+0x18>
 20a:	5d c0       	rjmp	.+186    	; 0x2c6 <DIO_init+0xd2>
 20c:	08 95       	ret
	{
		case 'A':
			if(direction == IN)
 20e:	41 11       	cpse	r20, r1
 210:	0f c0       	rjmp	.+30     	; 0x230 <DIO_init+0x3c>
			{
				DDRA &= !(1<<pinnumber);
 212:	9a b3       	in	r25, 0x1a	; 26
 214:	21 e0       	ldi	r18, 0x01	; 1
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	02 c0       	rjmp	.+4      	; 0x21e <DIO_init+0x2a>
 21a:	22 0f       	add	r18, r18
 21c:	33 1f       	adc	r19, r19
 21e:	6a 95       	dec	r22
 220:	e2 f7       	brpl	.-8      	; 0x21a <DIO_init+0x26>
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	23 2b       	or	r18, r19
 226:	09 f0       	breq	.+2      	; 0x22a <DIO_init+0x36>
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	89 23       	and	r24, r25
 22c:	8a bb       	out	0x1a, r24	; 26
 22e:	08 95       	ret
			}
			else if(direction == OUT)
 230:	41 30       	cpi	r20, 0x01	; 1
 232:	09 f0       	breq	.+2      	; 0x236 <DIO_init+0x42>
 234:	65 c0       	rjmp	.+202    	; 0x300 <DIO_init+0x10c>
			{
				DDRA |= (1<<pinnumber);
 236:	2a b3       	in	r18, 0x1a	; 26
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	02 c0       	rjmp	.+4      	; 0x242 <DIO_init+0x4e>
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	6a 95       	dec	r22
 244:	e2 f7       	brpl	.-8      	; 0x23e <DIO_init+0x4a>
 246:	82 2b       	or	r24, r18
 248:	8a bb       	out	0x1a, r24	; 26
 24a:	08 95       	ret
			{
				// ERROR HANDLING
			}
		break;
		case 'B':
			if(direction == IN)
 24c:	41 11       	cpse	r20, r1
 24e:	0f c0       	rjmp	.+30     	; 0x26e <DIO_init+0x7a>
			{
				DDRB &= !(1<<pinnumber);
 250:	97 b3       	in	r25, 0x17	; 23
 252:	21 e0       	ldi	r18, 0x01	; 1
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_init+0x68>
 258:	22 0f       	add	r18, r18
 25a:	33 1f       	adc	r19, r19
 25c:	6a 95       	dec	r22
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_init+0x64>
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	23 2b       	or	r18, r19
 264:	09 f0       	breq	.+2      	; 0x268 <DIO_init+0x74>
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	89 23       	and	r24, r25
 26a:	87 bb       	out	0x17, r24	; 23
 26c:	08 95       	ret
			}
			else if(direction == OUT)
 26e:	41 30       	cpi	r20, 0x01	; 1
 270:	09 f0       	breq	.+2      	; 0x274 <DIO_init+0x80>
 272:	46 c0       	rjmp	.+140    	; 0x300 <DIO_init+0x10c>
			{
				DDRB |= (1<<pinnumber);
 274:	27 b3       	in	r18, 0x17	; 23
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	02 c0       	rjmp	.+4      	; 0x280 <DIO_init+0x8c>
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	6a 95       	dec	r22
 282:	e2 f7       	brpl	.-8      	; 0x27c <DIO_init+0x88>
 284:	82 2b       	or	r24, r18
 286:	87 bb       	out	0x17, r24	; 23
 288:	08 95       	ret
			{
				// ERROR HANDLING
			}
		break;
		case 'C':
			if(direction == IN)
 28a:	41 11       	cpse	r20, r1
 28c:	0f c0       	rjmp	.+30     	; 0x2ac <DIO_init+0xb8>
			{
				DDRC &= !(1<<pinnumber);
 28e:	94 b3       	in	r25, 0x14	; 20
 290:	21 e0       	ldi	r18, 0x01	; 1
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_init+0xa6>
 296:	22 0f       	add	r18, r18
 298:	33 1f       	adc	r19, r19
 29a:	6a 95       	dec	r22
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_init+0xa2>
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	23 2b       	or	r18, r19
 2a2:	09 f0       	breq	.+2      	; 0x2a6 <DIO_init+0xb2>
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	89 23       	and	r24, r25
 2a8:	84 bb       	out	0x14, r24	; 20
 2aa:	08 95       	ret
			}
			else if(direction == OUT)
 2ac:	41 30       	cpi	r20, 0x01	; 1
 2ae:	41 f5       	brne	.+80     	; 0x300 <DIO_init+0x10c>
			{
				DDRC |= (1<<pinnumber);
 2b0:	24 b3       	in	r18, 0x14	; 20
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_init+0xc8>
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	6a 95       	dec	r22
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_init+0xc4>
 2c0:	82 2b       	or	r24, r18
 2c2:	84 bb       	out	0x14, r24	; 20
 2c4:	08 95       	ret
			{
				// ERROR HANDLING
			}
		break;
		case 'D':
			if(direction == IN)
 2c6:	41 11       	cpse	r20, r1
 2c8:	0f c0       	rjmp	.+30     	; 0x2e8 <DIO_init+0xf4>
			{
				DDRD &= !(1<<pinnumber);
 2ca:	91 b3       	in	r25, 0x11	; 17
 2cc:	21 e0       	ldi	r18, 0x01	; 1
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_init+0xe2>
 2d2:	22 0f       	add	r18, r18
 2d4:	33 1f       	adc	r19, r19
 2d6:	6a 95       	dec	r22
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_init+0xde>
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	23 2b       	or	r18, r19
 2de:	09 f0       	breq	.+2      	; 0x2e2 <DIO_init+0xee>
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	89 23       	and	r24, r25
 2e4:	81 bb       	out	0x11, r24	; 17
 2e6:	08 95       	ret
			}
			else if(direction == OUT)
 2e8:	41 30       	cpi	r20, 0x01	; 1
 2ea:	51 f4       	brne	.+20     	; 0x300 <DIO_init+0x10c>
			{
				DDRD |= (1<<pinnumber);
 2ec:	21 b3       	in	r18, 0x11	; 17
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <DIO_init+0x104>
 2f4:	88 0f       	add	r24, r24
 2f6:	99 1f       	adc	r25, r25
 2f8:	6a 95       	dec	r22
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <DIO_init+0x100>
 2fc:	82 2b       	or	r24, r18
 2fe:	81 bb       	out	0x11, r24	; 17
 300:	08 95       	ret

00000302 <DIO_write>:
		break;
	}
}
void DIO_write(uint8 portnumber, uint8 pinnumber, uint8 value)
{
	switch(portnumber)
 302:	82 34       	cpi	r24, 0x42	; 66
 304:	51 f1       	breq	.+84     	; 0x35a <DIO_write+0x58>
 306:	18 f4       	brcc	.+6      	; 0x30e <DIO_write+0xc>
 308:	81 34       	cpi	r24, 0x41	; 65
 30a:	41 f0       	breq	.+16     	; 0x31c <DIO_write+0x1a>
 30c:	08 95       	ret
 30e:	83 34       	cpi	r24, 0x43	; 67
 310:	09 f4       	brne	.+2      	; 0x314 <DIO_write+0x12>
 312:	42 c0       	rjmp	.+132    	; 0x398 <DIO_write+0x96>
 314:	84 34       	cpi	r24, 0x44	; 68
 316:	09 f4       	brne	.+2      	; 0x31a <DIO_write+0x18>
 318:	5d c0       	rjmp	.+186    	; 0x3d4 <DIO_write+0xd2>
 31a:	08 95       	ret
	{
		case 'A':
		if(value == IN)
 31c:	41 11       	cpse	r20, r1
 31e:	0f c0       	rjmp	.+30     	; 0x33e <DIO_write+0x3c>
		{
			PORTA &= !(1<<pinnumber);
 320:	9b b3       	in	r25, 0x1b	; 27
 322:	21 e0       	ldi	r18, 0x01	; 1
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_write+0x2a>
 328:	22 0f       	add	r18, r18
 32a:	33 1f       	adc	r19, r19
 32c:	6a 95       	dec	r22
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_write+0x26>
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	23 2b       	or	r18, r19
 334:	09 f0       	breq	.+2      	; 0x338 <DIO_write+0x36>
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	89 23       	and	r24, r25
 33a:	8b bb       	out	0x1b, r24	; 27
 33c:	08 95       	ret
		}
		else if(value == OUT)
 33e:	41 30       	cpi	r20, 0x01	; 1
 340:	09 f0       	breq	.+2      	; 0x344 <DIO_write+0x42>
 342:	65 c0       	rjmp	.+202    	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
		{
			PORTA |= (1<<pinnumber);
 344:	2b b3       	in	r18, 0x1b	; 27
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	02 c0       	rjmp	.+4      	; 0x350 <DIO_write+0x4e>
 34c:	88 0f       	add	r24, r24
 34e:	99 1f       	adc	r25, r25
 350:	6a 95       	dec	r22
 352:	e2 f7       	brpl	.-8      	; 0x34c <DIO_write+0x4a>
 354:	82 2b       	or	r24, r18
 356:	8b bb       	out	0x1b, r24	; 27
 358:	08 95       	ret
		{
			// ERROR HANDLING
		}
		break;
		case 'B':
		if(value == IN)
 35a:	41 11       	cpse	r20, r1
 35c:	0f c0       	rjmp	.+30     	; 0x37c <DIO_write+0x7a>
		{
			PORTB &= !(1<<pinnumber);
 35e:	98 b3       	in	r25, 0x18	; 24
 360:	21 e0       	ldi	r18, 0x01	; 1
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	02 c0       	rjmp	.+4      	; 0x36a <DIO_write+0x68>
 366:	22 0f       	add	r18, r18
 368:	33 1f       	adc	r19, r19
 36a:	6a 95       	dec	r22
 36c:	e2 f7       	brpl	.-8      	; 0x366 <DIO_write+0x64>
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	23 2b       	or	r18, r19
 372:	09 f0       	breq	.+2      	; 0x376 <DIO_write+0x74>
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	89 23       	and	r24, r25
 378:	88 bb       	out	0x18, r24	; 24
 37a:	08 95       	ret
		}
		else if(value == OUT)
 37c:	41 30       	cpi	r20, 0x01	; 1
 37e:	09 f0       	breq	.+2      	; 0x382 <DIO_write+0x80>
 380:	46 c0       	rjmp	.+140    	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
		{
			PORTB |= (1<<pinnumber);
 382:	28 b3       	in	r18, 0x18	; 24
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	02 c0       	rjmp	.+4      	; 0x38e <DIO_write+0x8c>
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	6a 95       	dec	r22
 390:	e2 f7       	brpl	.-8      	; 0x38a <DIO_write+0x88>
 392:	82 2b       	or	r24, r18
 394:	88 bb       	out	0x18, r24	; 24
 396:	08 95       	ret
		{
			// ERROR HANDLING
		}
		break;
		case 'C':
		if(value == IN)
 398:	41 11       	cpse	r20, r1
 39a:	0f c0       	rjmp	.+30     	; 0x3ba <DIO_write+0xb8>
		{
			PORTC &= !(1<<pinnumber);
 39c:	95 b3       	in	r25, 0x15	; 21
 39e:	21 e0       	ldi	r18, 0x01	; 1
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <DIO_write+0xa6>
 3a4:	22 0f       	add	r18, r18
 3a6:	33 1f       	adc	r19, r19
 3a8:	6a 95       	dec	r22
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <DIO_write+0xa2>
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	23 2b       	or	r18, r19
 3b0:	09 f0       	breq	.+2      	; 0x3b4 <DIO_write+0xb2>
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	89 23       	and	r24, r25
 3b6:	85 bb       	out	0x15, r24	; 21
 3b8:	08 95       	ret
		}
		else if(value == OUT)
 3ba:	41 30       	cpi	r20, 0x01	; 1
 3bc:	41 f5       	brne	.+80     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
		{
			PORTC |= (1<<pinnumber);
 3be:	25 b3       	in	r18, 0x15	; 21
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <DIO_write+0xc8>
 3c6:	88 0f       	add	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	6a 95       	dec	r22
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <DIO_write+0xc4>
 3ce:	82 2b       	or	r24, r18
 3d0:	85 bb       	out	0x15, r24	; 21
 3d2:	08 95       	ret
		{
			// ERROR HANDLING
		}
		break;
		case 'D':
		if(value == IN)
 3d4:	41 11       	cpse	r20, r1
 3d6:	0f c0       	rjmp	.+30     	; 0x3f6 <DIO_write+0xf4>
		{
			PORTD &= !(1<<pinnumber);
 3d8:	92 b3       	in	r25, 0x12	; 18
 3da:	21 e0       	ldi	r18, 0x01	; 1
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <DIO_write+0xe2>
 3e0:	22 0f       	add	r18, r18
 3e2:	33 1f       	adc	r19, r19
 3e4:	6a 95       	dec	r22
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <DIO_write+0xde>
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	23 2b       	or	r18, r19
 3ec:	09 f0       	breq	.+2      	; 0x3f0 <DIO_write+0xee>
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	89 23       	and	r24, r25
 3f2:	82 bb       	out	0x12, r24	; 18
 3f4:	08 95       	ret
		}
		else if(value == OUT)
 3f6:	41 30       	cpi	r20, 0x01	; 1
 3f8:	51 f4       	brne	.+20     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
		{
			PORTD |= (1<<pinnumber);
 3fa:	22 b3       	in	r18, 0x12	; 18
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	02 c0       	rjmp	.+4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 402:	88 0f       	add	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	6a 95       	dec	r22
 408:	e2 f7       	brpl	.-8      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 40a:	82 2b       	or	r24, r18
 40c:	82 bb       	out	0x12, r24	; 18
 40e:	08 95       	ret

00000410 <global_interrupt_enable>:
#include "interrupt.h"

void global_interrupt_enable()
{
	// enable global interrupts
	SREG |= (1<<IBIT);
 410:	8f b7       	in	r24, 0x3f	; 63
 412:	80 68       	ori	r24, 0x80	; 128
 414:	8f bf       	out	0x3f, r24	; 63
 416:	08 95       	ret

00000418 <interrupt_init>:
}

void interrupt_init()
{
	// sensing on rising edge interrupt 0
	MCUCR |= (1<<ISC00) | (1<<ISC01);
 418:	85 b7       	in	r24, 0x35	; 53
 41a:	83 60       	ori	r24, 0x03	; 3
 41c:	85 bf       	out	0x35, r24	; 53
	
	// enable interrupts (interrupt 0)
	GICR |= (1<<INT0);
 41e:	8b b7       	in	r24, 0x3b	; 59
 420:	80 64       	ori	r24, 0x40	; 64
 422:	8b bf       	out	0x3b, r24	; 59
 424:	08 95       	ret

00000426 <timer0_init_normal>:
#include "timer.h"


void timer0_init_normal()
{
	TCCR0 = 0x00;    // Normal Mode
 426:	13 be       	out	0x33, r1	; 51
 428:	08 95       	ret

0000042a <timer0_start_normal>:
}
void timer0_start_normal()
{
	TCCR0 = 0x00;
 42a:	13 be       	out	0x33, r1	; 51
	TCCR0 |= 1;
 42c:	83 b7       	in	r24, 0x33	; 51
 42e:	81 60       	ori	r24, 0x01	; 1
 430:	83 bf       	out	0x33, r24	; 51
 432:	08 95       	ret

00000434 <timer0_stop_normal>:
}
void timer0_stop_normal()
{
	TCCR0 = 0x00;
 434:	13 be       	out	0x33, r1	; 51
 436:	08 95       	ret

00000438 <one_ms_delay>:
}
void one_ms_delay() // in ms
{
 438:	cf 93       	push	r28
 43a:	df 93       	push	r29
 43c:	00 d0       	rcall	.+0      	; 0x43e <one_ms_delay+0x6>
 43e:	00 d0       	rcall	.+0      	; 0x440 <one_ms_delay+0x8>
 440:	cd b7       	in	r28, 0x3d	; 61
 442:	de b7       	in	r29, 0x3e	; 62
	timer0_init_normal();
 444:	0e 94 13 02 	call	0x426	; 0x426 <timer0_init_normal>
	volatile long overflowcounter = 0;
 448:	19 82       	std	Y+1, r1	; 0x01
 44a:	1a 82       	std	Y+2, r1	; 0x02
 44c:	1b 82       	std	Y+3, r1	; 0x03
 44e:	1c 82       	std	Y+4, r1	; 0x04
	// 	volatile long initial_value = 6;
	timer0_start_normal();
 450:	0e 94 15 02 	call	0x42a	; 0x42a <timer0_start_normal>
	while(overflowcounter < 4)
 454:	13 c0       	rjmp	.+38     	; 0x47c <one_ms_delay+0x44>
	{
		TCNT0 = 50;
 456:	82 e3       	ldi	r24, 0x32	; 50
 458:	82 bf       	out	0x32, r24	; 50
		while((TIFR & (1<<0))==0);
 45a:	08 b6       	in	r0, 0x38	; 56
 45c:	00 fe       	sbrs	r0, 0
 45e:	fd cf       	rjmp	.-6      	; 0x45a <one_ms_delay+0x22>
		overflowcounter++;
 460:	89 81       	ldd	r24, Y+1	; 0x01
 462:	9a 81       	ldd	r25, Y+2	; 0x02
 464:	ab 81       	ldd	r26, Y+3	; 0x03
 466:	bc 81       	ldd	r27, Y+4	; 0x04
 468:	01 96       	adiw	r24, 0x01	; 1
 46a:	a1 1d       	adc	r26, r1
 46c:	b1 1d       	adc	r27, r1
 46e:	89 83       	std	Y+1, r24	; 0x01
 470:	9a 83       	std	Y+2, r25	; 0x02
 472:	ab 83       	std	Y+3, r26	; 0x03
 474:	bc 83       	std	Y+4, r27	; 0x04
		TIFR |= (1<<0);
 476:	88 b7       	in	r24, 0x38	; 56
 478:	81 60       	ori	r24, 0x01	; 1
 47a:	88 bf       	out	0x38, r24	; 56
{
	timer0_init_normal();
	volatile long overflowcounter = 0;
	// 	volatile long initial_value = 6;
	timer0_start_normal();
	while(overflowcounter < 4)
 47c:	89 81       	ldd	r24, Y+1	; 0x01
 47e:	9a 81       	ldd	r25, Y+2	; 0x02
 480:	ab 81       	ldd	r26, Y+3	; 0x03
 482:	bc 81       	ldd	r27, Y+4	; 0x04
 484:	04 97       	sbiw	r24, 0x04	; 4
 486:	a1 05       	cpc	r26, r1
 488:	b1 05       	cpc	r27, r1
 48a:	2c f3       	brlt	.-54     	; 0x456 <one_ms_delay+0x1e>
		TCNT0 = 50;
		while((TIFR & (1<<0))==0);
		overflowcounter++;
		TIFR |= (1<<0);
	}
	timer0_stop_normal();
 48c:	0e 94 1a 02 	call	0x434	; 0x434 <timer0_stop_normal>
}
 490:	0f 90       	pop	r0
 492:	0f 90       	pop	r0
 494:	0f 90       	pop	r0
 496:	0f 90       	pop	r0
 498:	df 91       	pop	r29
 49a:	cf 91       	pop	r28
 49c:	08 95       	ret

0000049e <my_delay_ms>:
void my_delay_ms(uint32 delaytime, uint8* LOOP_BEAKERR)
{
 49e:	ef 92       	push	r14
 4a0:	ff 92       	push	r15
 4a2:	0f 93       	push	r16
 4a4:	1f 93       	push	r17
 4a6:	cf 93       	push	r28
 4a8:	df 93       	push	r29
 4aa:	8c 01       	movw	r16, r24
 4ac:	7b 01       	movw	r14, r22
	uint32 i=0;
 4ae:	c0 e0       	ldi	r28, 0x00	; 0
 4b0:	d0 e0       	ldi	r29, 0x00	; 0
	for(; i<delaytime && !(*LOOP_BEAKERR); i++)
 4b2:	03 c0       	rjmp	.+6      	; 0x4ba <my_delay_ms+0x1c>
		one_ms_delay();
 4b4:	0e 94 1c 02 	call	0x438	; 0x438 <one_ms_delay>
	timer0_stop_normal();
}
void my_delay_ms(uint32 delaytime, uint8* LOOP_BEAKERR)
{
	uint32 i=0;
	for(; i<delaytime && !(*LOOP_BEAKERR); i++)
 4b8:	21 96       	adiw	r28, 0x01	; 1
 4ba:	c0 17       	cp	r28, r16
 4bc:	d1 07       	cpc	r29, r17
 4be:	20 f4       	brcc	.+8      	; 0x4c8 <my_delay_ms+0x2a>
 4c0:	f7 01       	movw	r30, r14
 4c2:	80 81       	ld	r24, Z
 4c4:	88 23       	and	r24, r24
 4c6:	b1 f3       	breq	.-20     	; 0x4b4 <my_delay_ms+0x16>
		one_ms_delay();
	return;
}
 4c8:	df 91       	pop	r29
 4ca:	cf 91       	pop	r28
 4cc:	1f 91       	pop	r17
 4ce:	0f 91       	pop	r16
 4d0:	ff 90       	pop	r15
 4d2:	ef 90       	pop	r14
 4d4:	08 95       	ret

000004d6 <_exit>:
 4d6:	f8 94       	cli

000004d8 <__stop_program>:
 4d8:	ff cf       	rjmp	.-2      	; 0x4d8 <__stop_program>
